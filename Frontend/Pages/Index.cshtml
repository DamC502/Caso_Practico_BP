@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<style>
        .tree-toggle {
            cursor: pointer;
            margin-right: 8px;
        }

        .indent-1 {
            padding-left: 1.5rem;
        }
        5
        .indent-2 {
            padding-left: 3rem;
        }

        .indent-3 {
            padding-left: 4rem;
        }

        .indent-4 {
            padding-left: 4rem;
        }

        .indent-5 {
            padding-left: 5rem;
        }

        .modal-content {
            max-width: 600px;
            margin: auto;
        }
    </style>

<div class="container my-4">

    <!-- Modal de confirmación de elimianción-->
    <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">

                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="confirmDeleteLabel">
                        <i class="fa-solid fa-triangle-exclamation"></i> Confirmar Eliminación
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>

                <div class="modal-body">
                    <p>¿Estás seguro que deseas eliminar este registro? Esta acción no se puede deshacer.</p>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-danger" id="btnConfirmDelete">
                        <i class="fa-solid fa-trash"></i> Eliminar
                    </button>
                </div>

            </div>
        </div>
    </div>
    <!-- Modal para edición-->
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Editar colaborador</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>

                <div class="modal-body">
                    <div class="card">
                        <div class="card-body">
                            <form id="editColaboradorForm">
                                <input type="hidden" id="OldIdColaborador" />

                                <div class="mb-3">
                                    <label for="editCodigo" class="form-label">Código del colaborador*</label>
                                    <input type="text" class="form-control" id="editCodigo" placeholder="1" required>
                                </div>
                                <div class="mb-3">
                                    <label for="editNombre" class="form-label">Nombre*</label>
                                    <input type="text" class="form-control" id="editNombre" placeholder="Nombre" required>
                                </div>
                                <div class="mb-3">
                                    <label for="editPuesto" class="form-label">Puesto*</label>
                                    <select class="form-select" id="editPuesto" required>
                                        @foreach (var puesto in Model.puestos)
                                        {
                                            <option value="@(puesto.IdPuesto)">@puesto.Puesto</option>
                                        }
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="editJefe" class="form-label">Jefe Inmediato</label>
                                    <select class="form-select" id="editJefe">
                                        <option selected value="-1">Sin Jefe</option>
                                        @foreach (var colaborador in Model.colaboradores)
                                        {
                                            <option value="@(colaborador.Codigo_Colaborador)">
                                                @(colaborador.Codigo_Colaborador.ToString() + " - " + colaborador.Colaborador_Nombre)
                                            </option>
                                        }
                                    </select>
                                </div>

                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                                    <button type="submit" class="btn btn-primary">Guardar cambios</button>
                                </div>

                            </form>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    


    <!-- Modal para crear -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Ingrese un nuevo colaborador</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <div class="card">
                        <div class="card-body">
                            <form id="colaboradorForm">
                                <div class="mb-3">
                                    <label for="codigo" class="form-label">Código del colaborador*</label>
                                    <input type="text" class="form-control" id="codigo" placeholder="1" required>
                                </div>
                                <div class="mb-3">
                                    <label for="nombre" class="form-label">Nombre*</label>
                                    <input type="text" class="form-control" id="nombre" placeholder="Nombre" required>
                                </div>
                                <div class="mb-3">
                                    <label for="puesto" class="form-label">Puesto*</label>
                                    <select class="form-select" id="puesto" required>
                                        @foreach (var puesto in Model.puestos)
                                        {
                                            <option value="@(puesto.IdPuesto)">@puesto.Puesto</option>
                                        }
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="jefe" class="form-label">Jefe Inmediato</label>
                                    <select class="form-select" id="jefe">
                                        <option selected value="-1">Sin Jefe</option>
                                        @foreach (var colaborador in Model.colaboradores)
                                        {
                                            <option value="@(colaborador.Codigo_Colaborador)">
                                                @(colaborador.Codigo_Colaborador.ToString() + " - " +
                                                  colaborador.Colaborador_Nombre)
                                            </option>
                                        }
                                    </select>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                                    <button type="submit" class="btn btn-primary">Guardar</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>


            </div>
        </div>
    </div>

    <div class="container my-4">

        <!-- Botón de creación alineado a la derecha -->
        <div class="d-flex justify-content-end mb-3">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                <i class="fa-solid fa-plus"></i> Nuevo Colaborador
            </button>
        </div>

        <!-- Card que contiene la tabla -->
        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <h5 class="mb-0">Lista de colaboradores</h5>
            </div>
            <div class="card-body p-0">
                <table class="table table-bordered table-hover mb-0 align-middle">
                    <thead class="table-light">
                        <tr>
                            <th style="width: 200px;">Código colaborador</th>
                            <th>Puesto</th>
                            <th>Nombre</th>
                            <th>Código Jefe</th>
                            <th style="width: 120px;">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var colaborador in Model.colaboradores)
                        {
                            <tr data-parent="@colaborador.Codigo_Jefe" data-id="@colaborador.Codigo_Colaborador" aria-expanded="true">
                                <td style="padding-left: @(colaborador.Nivel)rem;">
                                    @if (colaborador.HasChild)
                                    {
                                        <span class="tree-toggle" role="button" aria-label="Expandir">
                                            <i class="fa-solid fa-chevron-down"></i>
                                        </span>
                                    }
                                    @colaborador.Codigo_Colaborador
                                </td>
                                <td>@colaborador.Puesto</td>
                                <td>@colaborador.Colaborador_Nombre</td>
                                <td>@(colaborador.Codigo_Jefe == -1 ? "" : colaborador.Codigo_Jefe.ToString())</td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button type="button" class="btn btn-primary" data-bs-toggle="tooltip" title="Editar"
                                                onclick='openEditModal(@Html.Raw(Json.Serialize(colaborador)))'>
                                            <i class="fa-solid fa-pen-to-square"></i>
                                        </button>
                                        <button type="button" class="btn btn-danger" data-bs-toggle="tooltip" title="Eliminar"
                                                onclick="setVarDelete(@colaborador.Codigo_Colaborador)">
                                            <i class="fa-solid fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>


<script>
        /// JS para borrar
        var idToDelte = -1; 

        function setVarDelete(id){
            idToDelete = id; // asigna el id del registro
            const modal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
            modal.show();
    
        }
        // manejador de tree-toggle
        document.addEventListener('click', function (e) {
          const btn = e.target.closest('.tree-toggle');
          if (!btn) return;

          const tr = btn.closest('tr');
          const id = tr.getAttribute('data-id');
          const expanded = tr.getAttribute('aria-expanded') === 'true';
          tr.setAttribute('aria-expanded', String(!expanded));

          
          const icon = btn.querySelector('i');
          icon.classList.toggle('fa-chevron-right', expanded);
          icon.classList.toggle('fa-chevron-down', !expanded);

          
          document.querySelectorAll('tr[data-parent="' + id + '"]').forEach(function (child) {
            child.hidden = expanded; 
          });
        });

        


        // llamda para la API para la creación de un nuevo colaborador
            document.getElementById("colaboradorForm").addEventListener("submit", async function(e) {
                e.preventDefault();

                const data = {
                    codColaborador: parseInt(document.getElementById("codigo").value),
                    nombre: document.getElementById("nombre").value,
                    idPuesto: parseInt(document.getElementById("puesto").value),
                    codJefe: parseInt(document.getElementById("jefe").value)
                };

                try {
                    const response = await fetch("@(Model.baseAPIURL)api/colaborador", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        alert("Colaborador guardado con éxito");
                        location.reload();
                    } else {
                        const error = await response.json();
                        alert("Error: " + (error.message || "No se pudo guardar"));
                    }
                } catch (err) {
                    console.error("Error en la solicitud:", err);
                    alert("Ocurrió un error al enviar los datos ");
                }
            });

        async function eliminarColaborador() {
        if (!idToDelete) {
                console.error("No esta definido el colaborador a eliminar");
                return;
            }

            try {
            const response = await fetch(`@(Model.baseAPIURL)api/Colaborador/${idToDelete}`, {
                    method: "DELETE",
                    headers: {
                        "Content-Type": "application/json"
                    }
                });

                if (response.ok) {
                    alert("Colaborador eliminado con éxito ");
                    location.reload(); 
                } else {
                    const error = await response.json();
                    alert("Error al eliminar: " + (error.message || "No se pudo eliminar"));
                }
            } catch (err) {
                console.error("Error en la solicitud:", err);
                alert("Ocurrió un error al eliminar el colaborador ");
            }
        }
        document.getElementById('btnConfirmDelete').addEventListener('click', eliminarColaborador);

        //JS de edición

        function openEditModal(colaborador) {
            document.getElementById("OldIdColaborador").value = colaborador.codigo_Colaborador;
            document.getElementById("editCodigo").value = colaborador.codigo_Colaborador;
            document.getElementById("editNombre").value = colaborador.colaborador_Nombre;
            document.getElementById("editPuesto").value = colaborador.id_puesto;
            document.getElementById("editJefe").value = colaborador.codigo_Jefe;

            const modal = new bootstrap.Modal(document.getElementById("editModal"));
            modal.show();
        }

        document.getElementById("editColaboradorForm").addEventListener("submit", async function(e) {
            e.preventDefault();

            const data = {
                oldCodColaborador: parseInt(document.getElementById("OldIdColaborador").value),
                codColaborador: parseInt(document.getElementById("editCodigo").value),
                nombre: document.getElementById("editNombre").value,
                idPuesto: parseInt(document.getElementById("editPuesto").value),
                codJefe: parseInt(document.getElementById("editJefe").value)
            };

            try {
                const response = await fetch("@(Model.baseAPIURL)api/colaborador/update", {
                    method: "PUT", 
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    alert("Colaborador editado con éxito ");
                    location.reload();
                } else {
                    const error = await response.json();
                    alert("Error: " + (error.message || "No se pudo editar"));
                }
            } catch (err) {
                console.error("Error en la solicitud:", err);
                alert("Ocurrió un error al editar los datos");
            }
        });


    </script>